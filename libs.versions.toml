[versions]
spring-boot = "3.4.4"
dbscheduler = "14.0.2"
kotlin = "2.1.20"
kotlinx-serialization = "1.8.1"
springdoc = "2.7.0"
cryptography = "0.4.0"
jackson = "2.18.2"
spotless = "7.0.2"
koin = "4.0.2"
exposed = "0.60.0"
kilua = "0.0.22"
compose = "1.8.0-beta02"
ktor = "3.1.2"
komapper = "5.0.0"

[plugins]
compose = { id = "org.jetbrains.compose", version.ref = "compose" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kilua = { id = "dev.kilua", version.ref = "kilua" }

kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }

kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
google-ksp = { id = "com.google.devtools.ksp", version = "2.1.20-2.0.0" }
spring-dependencymanagement = { id = "io.spring.dependency-management", version = "1.1.7" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
graalvm-buildtools = { id = "org.graalvm.buildtools.native", version = "0.10.2" }
netflix-dgs-codegen = { id = "com.netflix.dgs.codegen", version = "6.2.1" }
ktor = { id = "io.ktor.plugin", version = "3.1.1" }

[libraries]
################ gradle 插件
kotlin-gradle-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
lombok-gradle = { module = "io.freefair.gradle:lombok-plugin", version = "8.6" }
spotless-gradle = { module = "com.diffplug.spotless:spotless-plugin-gradle", version.ref = "spotless" }

###########################  kilua:
kilua = { module = "dev.kilua:kilua", version.ref = "kilua" }
kilua-tailwindcss = { module = "dev.kilua:kilua-tailwindcss", version.ref = "kilua" }



###########################  工具:
cryptography-core = { module = "dev.whyoleg.cryptography:cryptography-core", version.ref = "cryptography" }
cryptography-jdk = { module = "dev.whyoleg.cryptography:cryptography-provider-jdk", version.ref = "cryptography" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version = "0.6.1" }
kotlinx-markdown = { module = "org.jetbrains:markdown", version = "0.7.3" }

jwtKt = { module = "com.appstractive:jwt-kt", version = "1.1.0" }

slf4k = { module = "ca.solo-studios:slf4k", version = "0.5.4" }
log4j2 = { module = "org.apache.logging.log4j:log4j-core", version = "2.24.3" }
log4j2-slf4j = { module = "org.apache.logging.log4j:log4j-slf4j2-impl", version = "2.24.3" }

testcontainers = { module = "org.testcontainers:testcontainers", version = "1.20.3" }
testcontainers-postgres = { module = "org.testcontainers:postgresql", version = "1.19.8" }

###########################  接口:
spring-data-commons = { module = "org.springframework.data:spring-data-commons", version.ref = "spring-boot" }
jakarta-servlet-api = { module = "jakarta.servlet:jakarta.servlet-api", version = "6.1.0" }
jakarta-validation-api = { module = "jakarta.validation:jakarta.validation-api", version = "3.1.0" }
spring-boot-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux", version.ref = "spring-boot" }
spring-boot-webmvc = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot" }

springdoc-openapi-webflux = { module = "org.springdoc:springdoc-openapi-starter-webflux-ui", version.ref = "springdoc" }
springdoc-openapi-webmvc = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdoc" }

jackson-core = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }
jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson" }

###########################  kotlin:
kotlin-reactor-extensions = { module = "io.projectreactor.kotlin:reactor-kotlin-extensions", version = "1.2.3" }
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version = "1.10.1" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-serialization-protobuf = { module = "org.jetbrains.kotlinx:kotlinx-serialization-protobuf", version.ref = "kotlinx-serialization" }

###########################  数据库:
hikaricp = { module = "com.zaxxer:HikariCP", version = "4.0.3" }
liquibase-core = { module = "org.liquibase:liquibase-core" }

jakarta-persistence-api = { module = "jakarta.persistence:jakarta.persistence-api", version = "3.2.0" }
spring-boot-jdbc = { module = "org.springframework.boot:spring-boot-starter-jdbc", version.ref = "spring-boot" }

exposed-starter = { module = "org.jetbrains.exposed:exposed-spring-boot-starter", version.ref = "exposed" }
exposed-kotlin-datetime = { module = "org.jetbrains.exposed:exposed-kotlin-datetime", version.ref = "exposed" }
exposed-core = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
exposed-dao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }
exposed-json = { module = "org.jetbrains.exposed:exposed-json", version.ref = "exposed" }

komapper-processor = { module = "org.komapper:komapper-processor", version.ref = "komapper" }
komapper-core = { module = "org.komapper:komapper-core", version.ref = "komapper" }
komapper-annotation = { module = "org.komapper:komapper-annotation", version.ref = "komapper" }

#komapper-r2dbc = { module = "org.komapper:komapper-r2dbc", version.ref = "komapper" }
komapper-r2dbc = { module = "org.komapper:komapper-starter-r2dbc", version.ref = "komapper" }
komapper-r2dbc-pgsql = { module = "org.komapper:komapper-dialect-postgresql-r2dbc", version.ref = "komapper" }

###########################  测试:
spring-boot-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-boot" }
kotlin-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher" }

###########################  ktor:
koin-ktor = { module = "io.insert-koin:koin-ktor", version.ref = "koin" }
koin-logger-slf4j = { module = "io.insert-koin:koin-logger-slf4j", version.ref = "koin" }

###########################  spring:
spring-boot = { module = "org.springframework.boot:spring-boot-starter", version.ref = "spring-boot" }
spring-boot-security = { module = "org.springframework.boot:spring-boot-starter-security", version.ref = "spring-boot" }
spring-boot-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot" }
spring-boot-devtools = { module = "org.springframework.boot:spring-boot-devtools", version.ref = "spring-boot" }
spring-boot-log4j2 = { module = "org.springframework.boot:spring-boot-starter-log4j2" }
spring-boot-docker-compose = { module = "org.springframework.boot:spring-boot-docker-compose", version.ref = "spring-boot" }
spring-boot-autoconfigure-processor = { module = "org.springframework.boot:spring-boot-autoconfigure-processor", version.ref = "spring-boot" }
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "spring-boot" }

###########################  ktor:
ktor-server-swagger = { module = "io.ktor:ktor-server-swagger", version.ref = "ktor" }
ktor-server-openapi = { module = "io.ktor:ktor-server-openapi", version.ref = "ktor" }


################ self
shared-api = { module = "com.github.walkin.shared:api" }
memos-boot = { module = "com.github.walkin.memos:boot" }

[bundles]
